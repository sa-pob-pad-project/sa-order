basePath: /
definitions:
  dto.ApproveOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.ApproveOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.CancelOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.CancelOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.CreateDeliveryInfoRequestDto:
    properties:
      address:
        type: string
      delivery_method:
        allOf:
        - $ref: '#/definitions/models.DeliveryMethodEnum'
        enum:
        - flash
        - pick_up
      phone_number:
        type: string
    required:
    - address
    - delivery_method
    - phone_number
    type: object
  dto.CreateDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.CreateOrderRequestDto:
    properties:
      note:
        type: string
    type: object
  dto.CreateOrderResponseDto:
    properties:
      order_id:
        type: string
    type: object
  dto.DeleteDeliveryInfoRequestDto:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  dto.DeleteDeliveryInfoResponseDto:
    properties:
      deleted_at:
        type: string
      id:
        type: string
    type: object
  dto.DeliveryInfoDto:
    properties:
      address:
        type: string
      created_at:
        type: string
      delivery_method:
        $ref: '#/definitions/models.DeliveryMethodEnum'
      id:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
      version:
        type: integer
    type: object
  dto.GetAllDeliveryInfosResponseDto:
    properties:
      delivery_infos:
        items:
          $ref: '#/definitions/dto.DeliveryInfoDto'
        type: array
    type: object
  dto.GetAllMedicinesResponseDto:
    properties:
      medicines:
        items:
          $ref: '#/definitions/dto.MedicineResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersForDoctorListDto:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.GetAllOrdersForDoctorResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersForDoctorResponseDto:
    properties:
      created_at:
        type: string
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      patient_info:
        $ref: '#/definitions/dto.PatientInfo'
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  dto.GetAllOrdersHistoryListDto:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.GetAllOrdersHistoryResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersHistoryResponseDto:
    properties:
      created_at:
        type: string
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  dto.GetDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.GetMedicineByIDResponseDto:
    properties:
      medicine:
        $ref: '#/definitions/dto.MedicineResponseDto'
    type: object
  dto.GetOrderByIDResponseDto:
    properties:
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
    type: object
  dto.MedicineResponseDto:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: number
      unit:
        type: string
      updated_at:
        type: string
    type: object
  dto.OrderItem:
    properties:
      medicine_id:
        type: string
      medicine_name:
        type: string
      quantity:
        type: number
    type: object
  dto.OrderItemInput:
    properties:
      medicine_id:
        type: string
      quantity:
        type: number
    type: object
  dto.PatientInfo:
    properties:
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      patient_id:
        type: string
      phone_number:
        type: string
    type: object
  dto.RejectOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.RejectOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.UpdateDeliveryInfoRequestDto:
    properties:
      address:
        type: string
      delivery_method:
        allOf:
        - $ref: '#/definitions/models.DeliveryMethodEnum'
        enum:
        - flash
        - pick_up
      id:
        type: string
      phone_number:
        type: string
    required:
    - address
    - delivery_method
    - id
    - phone_number
    type: object
  dto.UpdateDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.UpdateOrderRequestDto:
    properties:
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItemInput'
        type: array
    type: object
  dto.UpdateOrderResponseDto:
    properties:
      order_id:
        type: string
    type: object
  models.DeliveryMethodEnum:
    enum:
    - flash
    - pick_up
    type: string
    x-enum-varnames:
    - DeliveryMethodFlash
    - DeliveryMethodPickUp
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: This is a sample server for a user API.
  title: Order API
  version: "1.0"
paths:
  /api/delivery-info/v1:
    delete:
      consumes:
      - application/json
      description: Deletes an existing delivery information record.
      parameters:
      - description: Delivery information ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information deleted successfully
          schema:
            $ref: '#/definitions/dto.DeleteDeliveryInfoResponseDto'
        "400":
          description: Invalid or missing delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while deleting delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete delivery information
      tags:
      - delivery-info
    get:
      consumes:
      - application/json
      description: Retrieves all delivery information records from the system.
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetDeliveryInfoResponseDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all delivery information records
      tags:
      - delivery-info
    post:
      consumes:
      - application/json
      description: Creates a new delivery information record for an order. Contains
        details about the delivery method and address.
      parameters:
      - description: Delivery information request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Delivery information created successfully
          schema:
            $ref: '#/definitions/dto.CreateDeliveryInfoResponseDto'
        "400":
          description: Invalid request body or missing required fields
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while creating delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new delivery information
      tags:
      - delivery-info
    put:
      consumes:
      - application/json
      description: Updates an existing delivery information record with new data.
      parameters:
      - description: Updated delivery information request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information updated successfully
          schema:
            $ref: '#/definitions/dto.UpdateDeliveryInfoResponseDto'
        "400":
          description: Invalid request body or missing delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while updating delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update delivery information
      tags:
      - delivery-info
  /api/delivery-info/v1/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific delivery record
        identified by its ID.
      parameters:
      - description: Delivery Information ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetDeliveryInfoResponseDto'
        "400":
          description: Invalid or missing delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get delivery information by ID
      tags:
      - delivery-info
  /api/delivery-info/v1/methods:
    get:
      consumes:
      - application/json
      description: Retrieves all delivery information records filtered by the specified
        delivery method (e.g., 'flash' for express delivery or 'pick_up' for customer
        pickup).
      parameters:
      - description: 'Delivery method filter: ''flash'' (express delivery) or ''pick_up''
          (customer pickup)'
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllDeliveryInfosResponseDto'
        "400":
          description: Missing or invalid delivery method query parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get delivery information by delivery method
      tags:
      - delivery-info
  /api/medicine/v1/medicines:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available medicines in the system. This
        endpoint does not require authentication.
      produces:
      - application/json
      responses:
        "200":
          description: Medicines retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllMedicinesResponseDto'
        "500":
          description: Internal server error while retrieving medicines
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all available medicines
      tags:
      - medicines
  /api/medicine/v1/medicines/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific medicine identified
        by its ID. This endpoint does not require authentication.
      parameters:
      - description: Medicine ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Medicine retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetMedicineByIDResponseDto'
        "400":
          description: Invalid or missing medicine ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Medicine not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving medicine
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get medicine details by ID
      tags:
      - medicines
  /api/order/v1/orders:
    delete:
      consumes:
      - application/json
      description: Cancels an order (doctor only). Only the doctor who created the
        order can cancel it. The order status will be changed to cancelled.
      parameters:
      - description: Cancel order request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CancelOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            $ref: '#/definitions/dto.CancelOrderResponseDto'
        "400":
          description: Invalid request body or missing order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only the doctor who created this order can cancel
            it
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while cancelling order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel an existing order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieves the complete order history for the authenticated patient.
        The patient is identified from the JWT authentication token.
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersHistoryListDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders for the current patient
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Creates a new order in the system. Only patients can create orders.
        The order will be assigned to the authenticated patient's doctor.
      parameters:
      - description: Order creation request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/dto.CreateOrderResponseDto'
        "400":
          description: Invalid request body or missing required fields
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only patients can create orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while creating order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Updates an order with new items or modifications. Only doctors
        can update orders they created. Supports adding, editing, or removing order
        items.
      parameters:
      - description: Order update request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            $ref: '#/definitions/dto.UpdateOrderResponseDto'
        "400":
          description: Invalid request body or malformed order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only the doctor who created this order can update
            it
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while updating order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing order
      tags:
      - orders
  /api/order/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific order including
        all order items and associated medicine information.
      parameters:
      - description: Order ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "400":
          description: Invalid or missing order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an order by ID
      tags:
      - orders
  /api/order/v1/orders/confirm:
    post:
      consumes:
      - application/json
      description: Approves an order and sets its status to approved (doctor only).
        Only the doctor who created the order can approve it.
      parameters:
      - description: Approve order request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ApproveOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order approved successfully
          schema:
            $ref: '#/definitions/dto.ApproveOrderResponseDto'
        "400":
          description: Invalid request body or missing order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only the doctor who created this order can approve
            it
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while approving order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Approve an existing order
      tags:
      - orders
  /api/order/v1/orders/doctor:
    get:
      consumes:
      - application/json
      description: Retrieves all orders created by the authenticated doctor. Includes
        patient information for each order. The doctor is identified from the JWT
        authentication token.
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersForDoctorListDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can access this endpoint
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders for the current doctor
      tags:
      - orders
  /api/order/v1/orders/doctor/history:
    get:
      consumes:
      - application/json
      description: Retrieves approved or rejected orders created by the authenticated
        doctor. Includes patient information for each order. Can filter by status
        using the optional query parameter. Valid status values are "approved" or
        "rejected".
      parameters:
      - description: 'Filter by status: ''approved'' or ''rejected''. If omitted,
          returns all approved and rejected orders.'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersForDoctorListDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can access this endpoint
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get approved or rejected orders for the current doctor
      tags:
      - orders
  /api/order/v1/orders/latest:
    get:
      consumes:
      - application/json
      description: Retrieves the most recent order for the authenticated patient.
        Returns the latest order regardless of its status.
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: No orders found for this patient
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get the latest order for the current patient
      tags:
      - orders
  /api/order/v1/orders/latest/{patient_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the most recent order for a specified patient. Only the
        assigned doctor can access this endpoint. The doctor is verified through the
        JWT token.
      parameters:
      - description: Patient ID (UUID)
        in: path
        name: patient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - doctors can only access orders for their assigned
            patients
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: No orders found for this patient
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while retrieving order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get the latest order for a specific patient
      tags:
      - orders
  /api/order/v1/orders/reject:
    post:
      consumes:
      - application/json
      description: Rejects an order and sets its status to rejected (doctor only).
        Only the doctor who created the order can reject it.
      parameters:
      - description: Reject order request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RejectOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order rejected successfully
          schema:
            $ref: '#/definitions/dto.RejectOrderResponseDto'
        "400":
          description: Invalid request body or missing order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication token missing or invalid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only the doctor who created this order can reject
            it
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error while rejecting order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reject an existing order
      tags:
      - orders
schemes:
- http
swagger: "2.0"
