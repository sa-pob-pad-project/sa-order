basePath: /
definitions:
  dto.ApproveOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.ApproveOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.CancelOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.CancelOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.CreateDeliveryInfoRequestDto:
    properties:
      address:
        type: string
      delivery_method:
        allOf:
        - $ref: '#/definitions/models.DeliveryMethodEnum'
        enum:
        - flash
        - pick_up
      phone_number:
        type: string
    required:
    - address
    - delivery_method
    - phone_number
    type: object
  dto.CreateDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.CreateOrderRequestDto:
    properties:
      note:
        type: string
    type: object
  dto.CreateOrderResponseDto:
    properties:
      order_id:
        type: string
    type: object
  dto.DeleteDeliveryInfoRequestDto:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  dto.DeleteDeliveryInfoResponseDto:
    properties:
      deleted_at:
        type: string
      id:
        type: string
    type: object
  dto.DeliveryInfoDto:
    properties:
      address:
        type: string
      created_at:
        type: string
      delivery_method:
        $ref: '#/definitions/models.DeliveryMethodEnum'
      id:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
      version:
        type: integer
    type: object
  dto.GetAllDeliveryInfosResponseDto:
    properties:
      delivery_infos:
        items:
          $ref: '#/definitions/dto.DeliveryInfoDto'
        type: array
    type: object
  dto.GetAllMedicinesResponseDto:
    properties:
      medicines:
        items:
          $ref: '#/definitions/dto.MedicineResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersForDoctorListDto:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.GetAllOrdersForDoctorResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersForDoctorResponseDto:
    properties:
      created_at:
        type: string
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      patient_info:
        $ref: '#/definitions/dto.PatientInfo'
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  dto.GetAllOrdersHistoryListDto:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.GetAllOrdersHistoryResponseDto'
        type: array
      total:
        type: integer
    type: object
  dto.GetAllOrdersHistoryResponseDto:
    properties:
      created_at:
        type: string
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  dto.GetDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.GetMedicineByIDResponseDto:
    properties:
      medicine:
        $ref: '#/definitions/dto.MedicineResponseDto'
    type: object
  dto.GetOrderByIDResponseDto:
    properties:
      delivery_at:
        type: string
      delivery_status:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItem'
        type: array
      patient_id:
        type: string
      reviewed_at:
        type: string
      status:
        type: string
      submitted_at:
        type: string
      total_amount:
        type: number
    type: object
  dto.MedicineResponseDto:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: number
      unit:
        type: string
      updated_at:
        type: string
    type: object
  dto.OrderItem:
    properties:
      medicine_id:
        type: string
      medicine_name:
        type: string
      quantity:
        type: number
    type: object
  dto.OrderItemInput:
    properties:
      medicine_id:
        type: string
      quantity:
        type: number
    type: object
  dto.PatientInfo:
    properties:
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      patient_id:
        type: string
      phone_number:
        type: string
    type: object
  dto.RejectOrderRequestDto:
    properties:
      order_id:
        type: string
    type: object
  dto.RejectOrderResponseDto:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.UpdateDeliveryInfoRequestDto:
    properties:
      address:
        type: string
      delivery_method:
        allOf:
        - $ref: '#/definitions/models.DeliveryMethodEnum'
        enum:
        - flash
        - pick_up
      id:
        type: string
      phone_number:
        type: string
    required:
    - address
    - delivery_method
    - id
    - phone_number
    type: object
  dto.UpdateDeliveryInfoResponseDto:
    properties:
      delivery_info:
        $ref: '#/definitions/dto.DeliveryInfoDto'
    type: object
  dto.UpdateOrderRequestDto:
    properties:
      order_id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/dto.OrderItemInput'
        type: array
    type: object
  dto.UpdateOrderResponseDto:
    properties:
      order_id:
        type: string
    type: object
  models.DeliveryMethodEnum:
    enum:
    - flash
    - pick_up
    type: string
    x-enum-varnames:
    - DeliveryMethodFlash
    - DeliveryMethodPickUp
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: This is a sample server for a user API.
  title: Order API
  version: "1.0"
paths:
  /api/delivery-info/v1:
    delete:
      consumes:
      - application/json
      description: Delete an existing delivery information record
      parameters:
      - description: Delivery Information ID to delete
        in: body
        name: delivery_info
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information deleted successfully
          schema:
            $ref: '#/definitions/dto.DeleteDeliveryInfoResponseDto'
        "400":
          description: Invalid delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to delete delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete delivery information
      tags:
      - delivery-info
    get:
      consumes:
      - application/json
      description: Retrieve all delivery information records
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetDeliveryInfoResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all delivery information
      tags:
      - delivery-info
    post:
      consumes:
      - application/json
      description: Create a new delivery information record
      parameters:
      - description: Delivery Information Data
        in: body
        name: delivery_info
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Delivery information created successfully
          schema:
            $ref: '#/definitions/dto.CreateDeliveryInfoResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new delivery information
      tags:
      - delivery-info
    put:
      consumes:
      - application/json
      description: Update an existing delivery information record
      parameters:
      - description: Updated Delivery Information Data
        in: body
        name: delivery_info
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateDeliveryInfoRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information updated successfully
          schema:
            $ref: '#/definitions/dto.UpdateDeliveryInfoResponseDto'
        "400":
          description: Invalid request body or delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update delivery information
      tags:
      - delivery-info
  /api/delivery-info/v1/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve delivery information details by ID
      parameters:
      - description: Delivery Information ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetDeliveryInfoResponseDto'
        "400":
          description: Invalid delivery information ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Delivery information not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get delivery information by ID
      tags:
      - delivery-info
  /api/delivery-info/v1/methods:
    get:
      consumes:
      - application/json
      description: Retrieve delivery information records filtered by delivery method
      parameters:
      - description: Delivery method (flash or pick_up)
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delivery information retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllDeliveryInfosResponseDto'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve delivery information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get delivery information by method
      tags:
      - delivery-info
  /api/medicine/v1/medicines:
    get:
      consumes:
      - application/json
      description: Retrieve all available medicines from the system
      produces:
      - application/json
      responses:
        "200":
          description: Medicines retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllMedicinesResponseDto'
        "500":
          description: Failed to retrieve medicines
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all medicines
      tags:
      - medicines
  /api/medicine/v1/medicines/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve medicine details by ID
      parameters:
      - description: Medicine ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Medicine retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetMedicineByIDResponseDto'
        "400":
          description: Invalid medicine ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Medicine not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve medicine
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get medicine by ID
      tags:
      - medicines
  /api/order/v1/orders:
    delete:
      consumes:
      - application/json
      description: Cancel an existing order (doctor only - can only cancel their own
        orders)
      parameters:
      - description: Order ID to cancel
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CancelOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            $ref: '#/definitions/dto.CancelOrderResponseDto'
        "400":
          description: Invalid request body or order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can cancel their own orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to cancel order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel an order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieve all orders for the authenticated patient from JWT token
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersHistoryListDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders history for the current patient
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order in the system
      parameters:
      - description: Order creation data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/dto.CreateOrderResponseDto'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only patients can create orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to create order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update an order (doctor only - can only edit their own orders).
        Can add, edit, or remove order items.
      parameters:
      - description: Order update data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            $ref: '#/definitions/dto.UpdateOrderResponseDto'
        "400":
          description: Invalid request body or order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can update their own orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to update order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing order
      tags:
      - orders
  /api/order/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve order details including order items and medicine information
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an order by ID
      tags:
      - orders
  /api/order/v1/orders/confirm:
    post:
      consumes:
      - application/json
      description: Approve an existing order (doctor only - can only approve their
        own orders). Sets order status to approved.
      parameters:
      - description: Order ID to approve
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.ApproveOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order approved successfully
          schema:
            $ref: '#/definitions/dto.ApproveOrderResponseDto'
        "400":
          description: Invalid request body or order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can approve their own orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to approve order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Approve an order
      tags:
      - orders
  /api/order/v1/orders/doctor:
    get:
      consumes:
      - application/json
      description: Retrieve all orders created by the authenticated doctor with patient
        information
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersForDoctorListDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can access this endpoint
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders for the current doctor
      tags:
      - orders
  /api/order/v1/orders/doctor/history:
    get:
      consumes:
      - application/json
      description: Retrieve all approved or rejected orders created by the authenticated
        doctor with patient information. Can filter by specific status (approved or
        rejected)
      parameters:
      - description: 'Filter by status: approved or rejected'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetAllOrdersForDoctorListDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can access this endpoint
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all approved or rejected orders for the current doctor
      tags:
      - orders
  /api/order/v1/orders/latest:
    get:
      consumes:
      - application/json
      description: Retrieve the most recent order for the authenticated patient
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: No orders found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get latest order for the current patient
      tags:
      - orders
  /api/order/v1/orders/latest/{patient_id}:
    get:
      consumes:
      - application/json
      description: Retrieve the most recent order for a specific patient. Only the
        assigned doctor can access this endpoint.
      parameters:
      - description: Patient ID
        in: path
        name: patient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/dto.GetOrderByIDResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - doctor can only access their own patient's orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: No orders found for this patient
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to retrieve order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get latest order for a specific patient (doctor only)
      tags:
      - orders
  /api/order/v1/orders/reject:
    post:
      consumes:
      - application/json
      description: Reject an existing order (doctor only - can only reject their own
        orders). Sets order status to rejected.
      parameters:
      - description: Order ID to reject
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.RejectOrderRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Order rejected successfully
          schema:
            $ref: '#/definitions/dto.RejectOrderResponseDto'
        "400":
          description: Invalid request body or order ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only doctors can reject their own orders
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Failed to reject order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reject an order
      tags:
      - orders
schemes:
- http
swagger: "2.0"
