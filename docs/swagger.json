{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server for a user API.",
        "title": "Order API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8082",
    "basePath": "/",
    "paths": {
        "/api/delivery-info/v1": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all delivery information records from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Get all delivery information records",
                "responses": {
                    "200": {
                        "description": "Delivery information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetDeliveryInfoResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing delivery information record with new data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Update delivery information",
                "parameters": [
                    {
                        "description": "Updated delivery information request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new delivery information record for an order. Contains details about the delivery method and address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Create new delivery information",
                "parameters": [
                    {
                        "description": "Delivery information request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Delivery information created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing delivery information record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Delete delivery information",
                "parameters": [
                    {
                        "description": "Delivery information ID to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/delivery-info/v1/methods": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all delivery information records filtered by the specified delivery method (e.g., 'flash' for express delivery or 'pick_up' for customer pickup).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Get delivery information by delivery method",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery method filter: 'flash' (express delivery) or 'pick_up' (customer pickup)",
                        "name": "method",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllDeliveryInfosResponseDto"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid delivery method query parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/delivery-info/v1/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific delivery record identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Get delivery information by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Information ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medicine/v1/medicines": {
            "get": {
                "description": "Retrieves a list of all available medicines in the system. This endpoint does not require authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Get all available medicines",
                "responses": {
                    "200": {
                        "description": "Medicines retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllMedicinesResponseDto"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving medicines",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medicine/v1/medicines/{id}": {
            "get": {
                "description": "Retrieves detailed information about a specific medicine identified by its ID. This endpoint does not require authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Get medicine details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medicine ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Medicine retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMedicineByIDResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing medicine ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Medicine not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving medicine",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the complete order history for the authenticated patient. The patient is identified from the JWT authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders for the current patient",
                "responses": {
                    "200": {
                        "description": "Orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllOrdersHistoryListDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an order with new items or modifications. Only doctors can update orders they created. Supports adding, editing, or removing order items.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update an existing order",
                "parameters": [
                    {
                        "description": "Order update request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or malformed order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only the doctor who created this order can update it",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new order in the system. Only patients can create orders. The order will be assigned to the authenticated patient's doctor.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order creation request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only patients can create orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancels an order (doctor only). Only the doctor who created the order can cancel it. The order status will be changed to cancelled.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel an existing order",
                "parameters": [
                    {
                        "description": "Cancel order request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CancelOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CancelOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only the doctor who created this order can cancel it",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while cancelling order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/confirm": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Approves an order and sets its status to approved (doctor only). Only the doctor who created the order can approve it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Approve an existing order",
                "parameters": [
                    {
                        "description": "Approve order request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ApproveOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order approved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ApproveOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only the doctor who created this order can approve it",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while approving order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/doctor": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all orders created by the authenticated doctor. Includes patient information for each order. The doctor is identified from the JWT authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders for the current doctor",
                "responses": {
                    "200": {
                        "description": "Orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllOrdersForDoctorListDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only doctors can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/doctor/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves approved or rejected orders created by the authenticated doctor. Includes patient information for each order. Can filter by status using the optional query parameter. Valid status values are \"approved\" or \"rejected\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get approved or rejected orders for the current doctor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status: 'approved' or 'rejected'. If omitted, returns all approved and rejected orders.",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllOrdersForDoctorListDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only doctors can access this endpoint",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/latest": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the most recent order for the authenticated patient. Returns the latest order regardless of its status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get the latest order for the current patient",
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No orders found for this patient",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/latest/{patient_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the most recent order for a specified patient. Only the assigned doctor can access this endpoint. The doctor is verified through the JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get the latest order for a specific patient",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID (UUID)",
                        "name": "patient_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - doctors can only access orders for their assigned patients",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No orders found for this patient",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/reject": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Rejects an order and sets its status to rejected (doctor only). Only the doctor who created the order can reject it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Reject an existing order",
                "parameters": [
                    {
                        "description": "Reject order request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RejectOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order rejected successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.RejectOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only the doctor who created this order can reject it",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while rejecting order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific order including all order items and associated medicine information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication token missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while retrieving order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApproveOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.ApproveOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CancelOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.CancelOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "address",
                "delivery_method",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "delivery_method": {
                    "enum": [
                        "flash",
                        "pick_up"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeliveryMethodEnum"
                        }
                    ]
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.CreateOrderRequestDto": {
            "type": "object",
            "properties": {
                "note": {
                    "type": "string"
                }
            }
        },
        "dto.CreateOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.DeliveryInfoDto": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "delivery_method": {
                    "$ref": "#/definitions/models.DeliveryMethodEnum"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllDeliveryInfosResponseDto": {
            "type": "object",
            "properties": {
                "delivery_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeliveryInfoDto"
                    }
                }
            }
        },
        "dto.GetAllMedicinesResponseDto": {
            "type": "object",
            "properties": {
                "medicines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MedicineResponseDto"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllOrdersForDoctorListDto": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetAllOrdersForDoctorResponseDto"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllOrdersForDoctorResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "delivery_at": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "string"
                },
                "doctor_id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItem"
                    }
                },
                "patient_id": {
                    "type": "string"
                },
                "patient_info": {
                    "$ref": "#/definitions/dto.PatientInfo"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.GetAllOrdersHistoryListDto": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetAllOrdersHistoryResponseDto"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllOrdersHistoryResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "delivery_at": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "string"
                },
                "doctor_id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItem"
                    }
                },
                "patient_id": {
                    "type": "string"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.GetDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.GetMedicineByIDResponseDto": {
            "type": "object",
            "properties": {
                "medicine": {
                    "$ref": "#/definitions/dto.MedicineResponseDto"
                }
            }
        },
        "dto.GetOrderByIDResponseDto": {
            "type": "object",
            "properties": {
                "delivery_at": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "string"
                },
                "doctor_id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItem"
                    }
                },
                "patient_id": {
                    "type": "string"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "dto.MedicineResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "stock": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.OrderItem": {
            "type": "object",
            "properties": {
                "medicine_id": {
                    "type": "string"
                },
                "medicine_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.OrderItemInput": {
            "type": "object",
            "properties": {
                "medicine_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.PatientInfo": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "patient_id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.RejectOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.RejectOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "address",
                "delivery_method",
                "id",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "delivery_method": {
                    "enum": [
                        "flash",
                        "pick_up"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeliveryMethodEnum"
                        }
                    ]
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.UpdateOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItemInput"
                    }
                }
            }
        },
        "dto.UpdateOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "models.DeliveryMethodEnum": {
            "type": "string",
            "enum": [
                "flash",
                "pick_up"
            ],
            "x-enum-varnames": [
                "DeliveryMethodFlash",
                "DeliveryMethodPickUp"
            ]
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}