// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/delivery-info/v1": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all delivery information records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Get all delivery information",
                "responses": {
                    "200": {
                        "description": "Delivery information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllDeliveryInfosResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing delivery information record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Update delivery information",
                "parameters": [
                    {
                        "description": "Updated Delivery Information Data",
                        "name": "delivery_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new delivery information record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Create a new delivery information",
                "parameters": [
                    {
                        "description": "Delivery Information Data",
                        "name": "delivery_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Delivery information created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an existing delivery information record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Delete delivery information",
                "parameters": [
                    {
                        "description": "Delivery Information ID to delete",
                        "name": "delivery_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteDeliveryInfoRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/delivery-info/v1/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve delivery information details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery-info"
                ],
                "summary": "Get delivery information by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Information ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetDeliveryInfoResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid delivery information ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Delivery information not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve delivery information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medicine/v1/medicines": {
            "get": {
                "description": "Retrieve all available medicines from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Get all medicines",
                "responses": {
                    "200": {
                        "description": "Medicines retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllMedicinesResponseDto"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve medicines",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/medicine/v1/medicines/{id}": {
            "get": {
                "description": "Retrieve medicine details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Get medicine by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medicine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Medicine retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetMedicineByIDResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid medicine ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Medicine not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve medicine",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all orders for the authenticated patient from JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders history for the current patient",
                "responses": {
                    "200": {
                        "description": "Orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAllOrdersHistoryListDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an order (doctor only - can only edit their own orders). Can add, edit, or remove order items.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update an existing order",
                "parameters": [
                    {
                        "description": "Order update data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only doctors can update their own orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new order in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order creation data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only patients can create orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel an existing order (doctor only - can only cancel their own orders)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel an order",
                "parameters": [
                    {
                        "description": "Order ID to cancel",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CancelOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CancelOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only doctors can cancel their own orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to cancel order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/confirm": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Approve an existing order (doctor only - can only approve their own orders). Sets order status to approved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Approve an order",
                "parameters": [
                    {
                        "description": "Order ID to approve",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ApproveOrderRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order approved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ApproveOrderResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only doctors can approve their own orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to approve order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/latest": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the most recent order for the authenticated patient",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get latest order for the current patient",
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No orders found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/latest/{patient_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the most recent order for a specific patient. Only the assigned doctor can access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get latest order for a specific patient (doctor only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "patient_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - doctor can only access their own patient's orders",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No orders found for this patient",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/order/v1/orders/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve order details including order items and medicine information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GetOrderByIDResponseDto"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve order",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApproveOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.ApproveOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CancelOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.CancelOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "address",
                "delivery_method",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "delivery_method": {
                    "enum": [
                        "flash",
                        "pick_up"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeliveryMethodEnum"
                        }
                    ]
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.CreateOrderRequestDto": {
            "type": "object",
            "properties": {
                "note": {
                    "type": "string"
                }
            }
        },
        "dto.CreateOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "dto.DeliveryInfoDto": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "delivery_method": {
                    "$ref": "#/definitions/models.DeliveryMethodEnum"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllDeliveryInfosResponseDto": {
            "type": "object",
            "properties": {
                "delivery_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DeliveryInfoDto"
                    }
                }
            }
        },
        "dto.GetAllMedicinesResponseDto": {
            "type": "object",
            "properties": {
                "medicines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MedicineResponseDto"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllOrdersHistoryListDto": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetAllOrdersHistoryResponseDto"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.GetAllOrdersHistoryResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "delivery_at": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "string"
                },
                "doctor_id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItem"
                    }
                },
                "patient_id": {
                    "type": "string"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.GetDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.GetMedicineByIDResponseDto": {
            "type": "object",
            "properties": {
                "medicine": {
                    "$ref": "#/definitions/dto.MedicineResponseDto"
                }
            }
        },
        "dto.GetOrderByIDResponseDto": {
            "type": "object",
            "properties": {
                "delivery_at": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "string"
                },
                "doctor_id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItem"
                    }
                },
                "patient_id": {
                    "type": "string"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "dto.MedicineResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "stock": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.OrderItem": {
            "type": "object",
            "properties": {
                "medicine_id": {
                    "type": "string"
                },
                "medicine_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.OrderItemInput": {
            "type": "object",
            "properties": {
                "medicine_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "dto.UpdateDeliveryInfoRequestDto": {
            "type": "object",
            "required": [
                "address",
                "delivery_method",
                "id",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "delivery_method": {
                    "enum": [
                        "flash",
                        "pick_up"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeliveryMethodEnum"
                        }
                    ]
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateDeliveryInfoResponseDto": {
            "type": "object",
            "properties": {
                "delivery_info": {
                    "$ref": "#/definitions/dto.DeliveryInfoDto"
                }
            }
        },
        "dto.UpdateOrderRequestDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderItemInput"
                    }
                }
            }
        },
        "dto.UpdateOrderResponseDto": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            }
        },
        "models.DeliveryMethodEnum": {
            "type": "string",
            "enum": [
                "flash",
                "pick_up"
            ],
            "x-enum-varnames": [
                "DeliveryMethodFlash",
                "DeliveryMethodPickUp"
            ]
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "User API",
	Description:      "This is a sample server for a user API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
